import os
import shutil
from .base import DataPreProcess, Datum

from .utils import check_dirs_exist



class DomainNet(DataPreProcess):

    dataset_dir = "domain_net"

    def __init__(self, dataset_path, seed, sub_domain_dir = None):
        self.dataset_dir = dataset_path
        self.img_folder = sub_domain_dir
        self.image_dir = os.path.join(self.dataset_dir, self.img_folder)
        self.seed = seed

    def preprocess(self,):
        if check_dirs_exist(self.dataset_dir, [f'{self.img_folder}_train',
                                               f'{self.img_folder}_val',
                                               f'{self.img_folder}_test']):
            print('Dataset has already been preprocessed!')
            return
        else:
            trainval = self.read_data(split_file=f"{self.img_folder}_train.txt")
            test = self.read_data(split_file=f"{self.img_folder}_test.txt")
            train, val = self.split_trainval(trainval, p_val=0.2)
            self.save_split(train, val, test, self.image_dir)


    def save_split(self, train, val, test, path_prefix, test_path_prefix=None):
        train = self._extract(train, path_prefix)
        val = self._extract(val, path_prefix)
        test_path_pre  = test_path_prefix or path_prefix
        test = self._extract(test, test_path_pre)

        splits = {f"{self.img_folder}_train": train,
                  f"{self.img_folder}_val": val,
                  f"{self.img_folder}_test": test}
        self.copy_files_datum(splits, self.dataset_dir, self.image_dir)
        print('Dataset train/val/test split done!')


    def read_data(self, split_file):
        filepath = os.path.join(self.dataset_dir, split_file)
        items = []

        with open(filepath, "r") as f:
            lines = f.readlines()
            for line in lines:
                line = line.strip()
                imname, label = line.split(" ")
                classname = imname.split("/")[1]
                impath = os.path.join(self.dataset_dir, imname)
                item = Datum(impath=impath, label=label, classname=classname)
                items.append(item)

        return items

    def copy_files_datum(self, splits, dataset_dir, image_dir):
        """ This copy func is tailored for splits generated by Datam class.
        """
        for k, v in splits.items():
            print(f'Copying {len(v)} files for {k} split...')
            os.makedirs(os.path.join(dataset_dir, k), exist_ok=True)
            for img_info in v:
                img_path, cls_idx, cls_name = img_info[0], img_info[1], img_info[2]
                img_name = img_path.split('/')[-1]
                os.makedirs(os.path.join(dataset_dir, k, cls_name), exist_ok=True)
                img_source = os.path.join(image_dir, img_path)
                img_target = os.path.join(dataset_dir, k, cls_name, img_name)
                shutil.copy(img_source, img_target)

    @property
    def class_names(self,):
        """ folder names of each class
        """
        train_dir = os.path.join(self.dataset_dir, f'{self.img_folder}_train')
        return list(os.listdir(train_dir))